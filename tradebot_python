from binance.client import Client
import random
import time
import sys
import copy


#create client instance to connect to Binance
def client_init(api_key,api_secret):
  client=Client(api_key,api_secret)
  return client

#get asset tickers to analyze which asset to buy
def get_best_asset(client,*tick_out):
  symbol_get=['nomatch']   #initate symbol_get with no match, if there's no match symbol return 'nomatch'
  kline5isRed=False  #to determine whether the 5min kline is positive pricechange
  min5_RISE_per=0.0  #5min pricechange percentage
  symbol_collect=client.get_all_tickers() 
  for symbol_fliter in symbol_collect:
    # fliter the BTC trade pairs, and tick out the 'BTCUSDT'/ tick_out element
    if ('BTC' in symbol_fliter['symbol']) and (symbol_fliter['symbol']!='BTCUSDT') and (symbol_fliter['symbol'] not in tick_out):
      # middle price of recent day kline 0.37x above the lowprice & 0.37x above lastprice/openprice
      ticker_24h=client.get_ticker(symbol=symbol_fliter['symbol'])
      h24_high_low_37per=float(ticker_24h['lowPrice'])+0.37*(float(ticker_24h['highPrice'])-float(ticker_24h['lowPrice']))
      h24_open_close_37per=min(float(ticker_24h['openPrice']),float(ticker_24h['lastPrice']))+0.37*abs(float(ticker_24h['openPrice'])-float(ticker_24h['lastPrice']))
      h24_price=(h24_high_low_37per+h24_open_close_37per)/2
      #//print(symbol_fliter["symbol"]+" 24h price is ",h24_price)
      ##
      #the structure of get_klines response:
      #[
      #  [
      #1499040000000,      // Open time
      #"0.01634790",       // Open
      #"0.80000000",       // High
      #"0.01575800",       // Low
      #"0.01577100",       // Close
      #"148976.11427815",  // Volume
      #1499644799999,      // Close time
      #"2434.19055334",    // Quote asset volume
      #308,                // Number of trades
      #"1756.87402397",    // Taker buy base asset volume
      #"28.46694368",      // Taker buy quote asset volume
      #"17928899.62484339" // Ignore
      #    ]
      #]
      # middle price of recent 30min kline 0.37x above the lowprice & 0.37x above lastprice/openprice
      ticker_30min = client.get_klines(symbol=symbol_fliter['symbol'], interval=Client.KLINE_INTERVAL_30MINUTE)
      min30_high_low_37per=float(ticker_30min[0][3])+0.37*(float(ticker_30min[0][2])-float(ticker_30min[0][3]))
      min30_open_close_37per=min(float(ticker_30min[0][1]),float(ticker_30min[0][4]))+0.37*abs(float(ticker_30min[0][1])-float(ticker_30min[0][4]))
      min30_price=(min30_high_low_37per+min30_open_close_37per)/2
      #//print('   min30_price is: ', min30_price)
      # 5min kline data
      ticker_5min = client.get_klines(symbol=symbol_fliter['symbol'], interval=Client.KLINE_INTERVAL_5MINUTE)
      min5_low_price=float(ticker_5min[0][3])
      # calc the 5min price change percentage and specify positive flag 'kline5isRed'
      if (float(ticker_5min[0][4])-float(ticker_5min[0][1])) < 0.0:
         min5_RISE_per=(float(ticker_5min[0][4])-float(ticker_5min[0][1]))/float(ticker_5min[0][1])
         if min5_RISE_per < -0.01:
              kline5isRed=True
      else: min5_RISE_per=0.0
      #//print("   "+str(min5_RISE_per))
      # *****************get the matching symbol*************************************
      if (h24_price > min30_price) and (min5_low_price > min30_price) and kline5isRed:
          if 'nomatch' in symbol_get:
            del symbol_get[0]
          symbol_get.append(symbol_fliter['symbol'])
          kline5isRed=False
  return symbol_get

#buy the best_asset with all spare BTC balance
def buy_order(client,symbol_buy):
  market=True
  #calc the price and amount to buy
  symbol_price = client.get_symbol_ticker(symbol=symbol_buy)['price']
  buy_price = copy.deepcopy(symbol_price)
  BTC_balance = str(float(client.get_asset_balance(asset='BTC')['free'])*0.95)
  amount_to_buy = float(BTC_balance)/float(buy_price)
  if amount_to_buy > 100:
    amount_to_buy = round(amount_to_buy)-1
  else:
    amount_to_buy = round(amount_to_buy, 2)-0.01
  # **********************post buy order**********************************************
  if market:
    order_buy = client.order_market_buy(
      symbol = symbol_buy,
      quantity = amount_to_buy,
      newOrderRespType = 'FULL')
  else:
    order_buy = client.order_limit_buy(
      symbol = symbol_buy,
      quantity = amount_to_buy,
      price = buy_price,
      newOrderRespType = 'FULL')
  return order_buy

#analyze the profit or lost to determin whether to stop reduce/earns
def calc_profit(client,symbol_bought,bought_price):
  symbol_price = float(client.get_symbol_ticker(symbol=symbol_bought)['price'])
  profit = (symbol_price - bought_price)/bought_price
  return profit

#according to calc_profit(), sell asset
def sell_order(client,symbol_sell,symbol_price,amount_to_sell,sell_type='limit'):
  if sell_type == 'market':
    order_sell = client.order_market_sell(
      symbol = symbol_sell,
      quantity = amount_to_sell)
  else:
    order_sell = client.order_limit_sell(
      symbol = symbol_sell,
      quantity = amount_to_sell,
      price = symbol_price)
  return order_sell

#calculate the proper amount of sell order
def sell_amount(client,symbol_pair,asset_symbol,sell_per):
  amount = float(client.get_asset_balance(asset=asset_symbol)['free'])
  pair_info = client.get_symbol_info(symbol_pair)
  asset_minQty = ''
  for get_minQty in pair_info['filters']:
    if get_minQty['filterType'] == 'LOT_SIZE':
      asset_minQty = float(get_minQty['minQty'])
      break
  if asset_minQty == '':
    asset_minQty = 1.0
  amount = (amount//asset_minQty)*asset_minQty
  if sell_per != 'all' and sell_per != 'ALL':
    amount = float(sell_per)*amount
  return amount
  
#prepare for next buy/sell order cycle
def next_cycle():
  return
#/////////////////////////////////TRADE BOT V1.0/////////////////////////////////////////
print("###############################BOT Start Time##############################"+time.ctime())
runFlag=True   
c=0
API_KEY=''
API_SECRET=''
client=client_init(API_KEY,API_SECRET)
print('client connected')
sys.stdout.flush()
symbol=[]
c=0
times_for_waitout = 0
BTC_balance_init = client.get_asset_balance(asset='BTC')['free']
while runFlag:
  c+=1
  BTC_balance_current = client.get_asset_balance(asset='BTC')['free']
  symbol=get_best_asset(client,['TNBBTC'])
  if c >10:
    pass
  if 'nomatch' in symbol:
    print("nomatch",end=" ")
    sys.stdout.flush()
    continue
  else:
    print("+ ",symbol)
    symbol_to_buy=random.choice(symbol)
  #*****************buy order**********************
  order_buy = buy_order(client,symbol_to_buy)
  while True:
    if order_buy['status'] == 'FILLED':
      break
  bought_amount = float(order_buy['executedQty'])
  #bought_price = float(order_buy['price'])
  #calculate filled average price
  total_cost = 0.0
  for avg in order_buy['fills']:
    total_cost += float(avg['price'])*float(avg['qty'])
  bought_price = total_cost/bought_amount
  if 'BTC' in symbol_to_buy:
    bought_asset = symbol_to_buy[:-3]
  #################################
  print(symbol_to_buy+"buy order filled",bought_amount,bought_price,time.ctime())
  sys.stdout.flush()
  symbol_to_sell = symbol_to_buy
  start_time = time.time()
  while True:
    profit_current = calc_profit(client,symbol_to_sell,bought_price)
    if (profit_current > 0.02) or (profit_current < -0.01):
      to_sell_amount = sell_amount(client,symbol_to_sell,bought_asset,'ALL')
      sell_price = client.get_symbol_ticker(symbol=symbol_to_sell)['price']
      order_sell = sell_order(client,symbol_to_sell, sell_price, to_sell_amount,'market')
      break
    elif (time.time() - start_time) > 1800:  # after N second, if frofit or stopprice not match, then sell at the current price
      print("wait for too long, sell")
      sys.stdout.flush()
      long_wait=True
      times_for_waitout +=1
      sell_price = client.get_symbol_ticker(symbol=symbol_to_sell)['price']
      # this kind of sell amount will sell the specified asset which exists before buying
      # sell_amount = round(float(client.get_asset_balance(asset=bought_asset)['free']),2)-0.01
      # with sell_amount function, fix the LOT_SIZE error
      to_sell_amount = sell_amount(client,symbol_to_sell,bought_asset,'ALL')
      print('sell amount and price: ',sell_amount, sell_price)   
      sys.stdout.flush()   
      order_sell = sell_order(client,symbol_to_sell, sell_price, to_sell_amount)
      break
    time.sleep(2)
  if long_wait:
    print("sorry waiting for %d times"%times_for_waitout)
  else:
    print("profit over 3%, sell order put")
  sys.stdout.flush()
  while True:
    #if order_sell['status'] == 'FILLED' :
    if client.get_open_orders(symbol=symbol_to_sell) == []:
      next_cycle()
      break
  print("sell order filled, start next cycle at:" + time.ctime())
  BTC_balance_check = client.get_asset_balance(asset='BTC')['free']
  print('the current cycle profit percent: %f%%'%(round((float(BTC_balance_check)-float(BTC_balance_current))/float(BTC_balance_current),5)*100))
  print('the total profit percent: %f%%'%(round((float(BTC_balance_check)-float(BTC_balance_init))/float(BTC_balance_init),5)*100))
  sys.stdout.flush()
